#notes, docker lecture 2<br/>#aimed at learning docker networking <div></div>#run this<br/>docker run -p 80 -d httpd<br/>#runs httpd in background as daemon (-d)<div></div>#setup on Ashish's machine.<br/>#HOST machine is running a "VM" called docker, using the command "virsh". Details of virsh are not covered here. The name "docker" for a VM is confusing, but that's ok as we know it now. The "docker" VM is used to create dockers in this demo. <div></div>#tried from host<br/>curl docker<br/>#does not work<br/>#he configured /etc/hosts on HOST to access "docker" that is a VM using it's hostname "docker"<div></div>#run on host<br/>docker ps<br/>#shows the port mappings, port 49154 of host (in his case) was mapped to 80 in docker<div></div>#run on host<br/>curl docker:49154 <br/>#works<br/>curl docker<br/>#does not work<div></div>#run <br/>docker run -p 80:80 -d httpd <br/>#this maps port 80 on host to port 80 on httpd docker <br/>curl docker<br/>#works<div></div>#try<br/>docker port <container-id><div></div>#stop and remove a docker<br/>docker stop <container-id><br/>docker rm <container-id><br/>or<br/>docker rm -f <container-id><div></div>#networking <br/>docker network ls<br/>#shows all networks <div></div>docker network create my-net<br/>#creates a network<div></div>docker run --rm -ti --net my-net --name my-server  ubuntu <br/>#creates a docker called my-server that uses my-net network<div></div>docker describe my-server | less<br/># run in another tab, shows network is my-net <br/>#if there is another docker in same network, then ?<div></div><br/>#task: create two dockers in same network and ensure they can ping to each other. Then create two dockers in different networks and see that they can not ping to each other.<div></div>#allocating volume to docker for persistent storage<br/>docker run --ti --rm -v  /root/data/:/data --name fedora1 fedora bash <br/>#with this /data in docker is mapped to /root/data in host<br/>#create a file in /data inside docker <div></div><br/>docker run --ti --rm --volumes-from fedora1 --name myubuntu ubuntu bash <br/>#shares the volume with the earlier created docker<br/>#run ls /data in this and you see the file created in earlier fedora1 docker <div></div>--<br/>#dockerfile<br/>#inside a file called 'Dockerfile'<br/>from fedora<br/>run echo "Docker demo"<br/>CMD echo "hello world"<div></div>#outside on prompt run<br/>docker build -t myapp .<br/>#the above did everything and exited. It built image, run it, and exited it.<div></div># change fedora in dockerfile to httpd<br/># change CMD line to /bin/bash <br/>#run same command to build<br/># Divya corrected saying that build will only build the image and you need to use "docker run "  with image name to run it<div></div>#run<br/>docker run --rm --ti myapp<div></div>#run commands do pre-work, the CMD does the actual work<br/># you can not have run command after CMD in Dockerfile<br/>#when you do<br/>docker run myapp<br/>#then it will print "hello world" and not "docker demo"<br/>#use of "run" inside Dockerfile: to do mounting of volumes, etc. <div></div>docker logs < container-name><br/># shows logs ?<div></div>#how to build base image? <br/>#see Dockerfile of Fedora at <a href="https://github.com/fedora-cloud/docker-brew-fedora/blob/137355c3944c2caf371c8c2b4d8ff0d111c367d3/x86_64/Dockerfile">https://github.com/fedora-cloud/docker-brew-fedora/blob/137355c3944c2caf371c8c2b4d8ff0d111c367d3/x86_64/Dockerfile</a> and correpsonding tar.xz file at <a href="https://github.com/fedora-cloud/docker-brew-fedora/blob/137355c3944c2caf371c8c2b4d8ff0d111c367d3/x86_64/fedora-37-x86_64.tar.xz">https://github.com/fedora-cloud/docker-brew-fedora/blob/137355c3944c2caf371c8c2b4d8ff0d111c367d3/x86_64/fedora-37-x86_64.tar.xz</a><div></div>#also see:<br/><a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a>/<br/><a href="https://subscription.packtpub.com/book/cloud-and-networking/9781838983444/2/ch02lvl1sec12/common-directives-in-dockerfiles">https://subscription.packtpub.com/book/cloud-and-networking/9781838983444/2/ch02lvl1sec12/common-directives-in-dockerfiles</a><div></div>